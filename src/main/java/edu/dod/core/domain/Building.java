package edu.dod.core.domain;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

/**
 * Building Domain representing a building.
 *
 * @author sky
 * @version 140506
 */
@Entity
@Table(name = "Buildings")
@NamedQueries({ 
	@NamedQuery(name = "Building.findById", query = "select distinct b from " +
			"Building b left join fetch b.rooms r where b.buildingId = :id")
})
public class Building {

	/**
	 * "@GenerateValue" means that how the id value was generated. IDENTITY
	 * strategy means that the id was generated by the backend during insert.
     */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "building_id")
	private String buildingId;

    /**
     * Building name.
     */
	@Column(name = "building_name")
	private String buildingName;

	/**
	 * mappedBy means the property in the Room class that provides the
	 * association(foreign key)
	 */
	@OneToMany(mappedBy = "building", cascade = CascadeType.ALL, orphanRemoval = true)
	private Set<Room> rooms = new HashSet<Room>();

	public String getBuildingId() {
		return buildingId;
	}

	public void setBuildingId(String buildingId) {
		this.buildingId = buildingId;
	}

	public String getBuildingName() {
		return buildingName;
	}

	public void setBuildingName(String buildingName) {
		this.buildingName = buildingName;
	}

	public Set<Room> getRooms() {
		return this.rooms;
	}

	public void setRooms(Set<Room> rooms) {
		this.rooms = rooms;
	}

	public void addRoom(Room room) {
		room.setBuilding(this);
		getRooms().add(room);
	}

	public void removeRoom(Room room) {
		getRooms().remove(room);
	}

}
